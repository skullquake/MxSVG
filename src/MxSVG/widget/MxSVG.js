require(
	{
		packages:[
			{
				name:'_d3',
				location:'/widgets/MxSVG/lib/d3/5.12.0/',
				main:'d3'
			}
		]
	},
	[
		"dojo/_base/declare",
		"mxui/widget/_WidgetBase",
		"dijit/_TemplatedMixin",
		"mxui/dom",
		"dojo/dom",
		"dojo/dom-prop",
		"dojo/dom-geometry",
		"dojo/dom-class",
		"dojo/dom-style",
		"dojo/dom-construct",
		"dojo/_base/array",
		"dojo/_base/lang",
		"dojo/text",
		"dojo/html",
		"dojo/_base/event",
		"dojo/mouse",
		"dojo/on",
		"MxSVG/lib/jquery-1.11.2",
		"_d3",
		"dojo/text!MxSVG/widget/template/MxSVG.html"
	],
	function(
		declare,
		_WidgetBase,
		_TemplatedMixin,
		dom,
		dojoDom,
		dojoProp,
		dojoGeometry,
		dojoClass,
		dojoStyle,
		dojoConstruct,
		dojoArray,
		lang,
		dojoText,
		dojoHtml,
		dojoEvent,
		mouse,
		on,
		_jQuery,
		d3,
		widgetTemplate
	){
		"use strict";
		var $=_jQuery.noConflict(true);
		return declare(
			"MxSVG.widget.MxSVG",
			[
				_WidgetBase,
				_TemplatedMixin
			],
			{
				templateString:widgetTemplate,
				widgetBase:null,
				_handles:null,
				_contextObj:null,
				//------------------------------
				str_click_left_single_mf:null,
				str_click_left_double_mf:null,
				str_click_right_single_mf:null,
				str_click_right_double_mf:null,
				str_hover_mf:null,
				//------------------------------
				str_click_entity:null,
				str_click_entity_id_attr:null,
				str_click_entity_class_attr:null,
				str_click_assoc:null,
				//------------------------------
				str_data_entity:null,
				str_data_assoc:null,
				str_data_entity_id_attr:null,
				str_data_entity_class_attr:null,
				str_data_entity_fill_attr:null,
				//------------------------------
				str_highlightcolor_correlated:null,
				str_highlightcolor_uncorrelated:null,
				//------------------------------
				arr_nod_all:[],
				arr_nod_correlated:[],
				arr_nod_uncorrelated:[],
				_objectChangeHandler:null,
				arr_evt:[],
				arr_hoverQueue:[],
				bool_alreadyClicked:null,
				int_doubleClickTimeout:null,
				int_hoverTimeout:null,
				//------------------------------
				constructor:function(){
					this._handles=[];
				},
				postCreate:function(){
					this.int_doubleClickTimeout=
						int_doubleClickTimeout==null?
						250:
						this.int_doubleClickTimeout
					;
					this.int_hoverTimeout=
						int_hoverTimeout==null?
						250:
						this.int_hoverTimeout
					;

				},
				update:function(obj,callback){
					if(this._objectChangeHandler!==null) {
						this.unsubscribe(this._objectChangeHandler);
					}
					if(obj){
						this._objectChangeHandler=this.subscribe({
						guid: obj.getGuid(),
						callback:dojo.hitch(this,function(){
							this._updateRendering(callback);
						})
					});
					}else{}
					this._contextObj=obj;
					if(this.dom_svg==null){
						this.dom_svg=dojo.create(
							'div',
							{
								'id':this.id+'_svgdiv'
							}
						);
						this.domNode.appendChild(this.dom_svg);
						//push lmbs
						this.arr_evt.push(dojo.connect(
							this.dom_svg,
							['click'],
							dojo.hitch(this,function(e){
								this.bool_alreadyClicked=
									this.bool_alreadyClicked==null?
									false:
									this.bool_alreadyClicked
								;
								if(e.detail===1){
										window.setTimeout(
											dojo.hitch(
												this,
												function(){
													if(!this.bool_alreadyClicked){
														this.bool_alreadyClicked=true;
														this.clickLMBS(e);
														this.bool_alreadyClicked=false;
													}
												}
											),
											this.int_doubleClickTimeout
										);
								}else if(e.detail===2){
									this.bool_alreadyClicked=true;
									this.clickLMBD(e);
									window.setTimeout(
										dojo.hitch(
											this,
											function(){
												this.bool_alreadyClicked=false;
											}
										),
										this.int_doubleClickTimeout
									);
								}
							})
						));
						//push rmb
						this.arr_evt.push(dojo.connect(
							this.dom_svg,
							['mousedown'],
							dojo.hitch(this,function(e){
								if(e.detail===1){
									window.setTimeout(
										dojo.hitch(
											this,
											function(){
												if(!this.bool_alreadyClicked){
													this.bool_alreadyClicked=true;
													this.clickRMBS(e);
													this.bool_alreadyClicked=false;
												}
											}
										),
										this.int_doubleClickTimeout
									);
								}else if(e.detail===2){
									this.bool_alreadyClicked=true;
									this.clickRMBD(e);
									window.setTimeout(
										dojo.hitch(
											this,
											function(){
												this.bool_alreadyClicked=false;
											}
										),
										this.int_doubleClickTimeout
									);
								}
							})
						));
					}
					this._updateRendering(callback);
					this._executeCallback(callback, "update");
				},
				resize: function (box) {
				},
				uninitialize: function () {
				},
				destroy:function () {
					console.log(this.evt);//make sure events are cleaned up
				},
				_updateRendering:function(callback){
					if(this._contextObj!==null){
						this.loaded=true;
						dojo.empty(this.dom_svg);//intermediate fix for replication on update
						var fileurl="/file?guid="+this._contextObj.getGuid()+"&changeDate="+(new Date().getTime());
						this.dom_svg.src=fileurl;
						d3.xml(fileurl)
						.then(
							dojo.hitch(
								this,
								function(data){
									dojoStyle.set(this.domNode,"display","block");
									d3.select(this.dom_svg).node().append(data.documentElement)
									this.svg=d3.select(dojo.query('svg',this.dom_svg)[0]);
									var svg=this.svg;
									//setup d3 zoom
									this.svg
										.attr("width","100%")
										.attr("height","100%")
										.call(d3.zoom().on("zoom",function(){
											svg.attr("transform",d3.event.transform)
										}))
										.append("g")
									//no d3 zoom on double click (https://bl.ocks.org/anonymous/42745557a8602692d9dc98c33a327d29)
									this.svg.on(
										"dblclick.zoom",
										null
									);
									//d3 remove context menu
									this.svg
									.on('contextmenu',
										function(){ 
											d3.event.preventDefault();
										}
									);
									//setup data entities
									new Promise((resolve,reject)=>{
										mx.data.get({
											guid:this._contextObj.getGuid(),
											path:this.str_data_assoc,
											filter:{
												offset:0,
												amount:4096
											},
											callback:function(objs){
												resolve(objs);
											},
											error:function(e){
												reject(e);
											}
										});

									})
									.then(
										dojo.hitch(this,function(arr_obj){
											if(this.str_data_entity_fill_attr){
												try{
													arr_obj.forEach(dojo.hitch(this,function(obj,objidx){
														var str_color=obj.get(this.str_data_entity_fill_attr);
														if(
															str_color!=null&&
															str_color!=''
														){
															var query='';
															if(
																obj.get(this.str_data_entity_class_attr)!=null&&
																obj.get(this.str_data_entity_class_attr)!=''
															){
																query+='.'+obj.get(this.str_data_entity_class_attr)
															}
															if(
																obj.get(this.str_data_entity_id_attr)!=null&&
																obj.get(this.str_data_entity_id_attr)!=''
															){
																query+='#'+obj.get(this.str_data_entity_id_attr)
															}
															if(query!=''){
																var arr_nod=dojo.query(this.dom_svg).query(query);
																arr_nod.forEach(dojo.hitch(this,function(obj_nod,obj_nod_idx){
																	$(obj_nod).css('fill',str_color);
																}));
															}
														}else{
															console.error(
																this.id+
																': '+
																this.str_data_entity_fill_attr+
																' null|empty'
															);
														}
													}));
												}catch(e){
													console.error(this.id+':'+e.toString());
												}
											}
											//hover
											if(
												(this.str_highlightcolor_correlated!=null||this.str_highlightcolor_correlated!='')&&
												!(
													this.str_data_entity_id_attr==null&&
													this.str_data_entity_class_attr==null
												)
											){
												this.arr_nod_correlated=[];
												arr_obj.forEach(dojo.hitch(this,function(obj,objidx){
													var query='';
													if(
														obj.get(this.str_data_entity_class_attr)!=null&&
														obj.get(this.str_data_entity_class_attr)!=''
													){
														query+='.'+obj.get(this.str_data_entity_class_attr)
													}
													if(
														obj.get(this.str_data_entity_id_attr)!=null&&
														obj.get(this.str_data_entity_id_attr)!=''
													){
														query+='#'+obj.get(this.str_data_entity_id_attr)
													}
													if(query!=''){
														var arr_nod_query=dojo.query(this.dom_svg).query(query);
														arr_nod_query.forEach(dojo.hitch(this,function(obj_nod,obj_nod_idx){
															this.arr_nod_correlated.push(obj_nod);
															obj_nod.oldfill=$(obj_nod).css('fill');
															this.arr_evt.push(on(
																obj_nod,
																mouse.enter,
																dojo.hitch(this,function(evt){
																	$(evt.target).css('fill',this.str_highlightcolor_correlated);
																	//handle hover server exec
																	this.hover(evt);
																})
															));
															this.arr_evt.push(on(
																obj_nod,
																mouse.leave,
																dojo.hitch(this,function(evt){
																	$(evt.target).css('fill',evt.target.oldfill);
																})
															));

														}));
													}
												}));
												//apply hover for uncorrelated...
												if(
													this.str_highlightcolor_uncorrelated!=null&&
													this.str_highlightcolor_uncorrelated!=''
												){
													this.arr_nod_uncorrelated=[];
													this.arr_nod_all=dojo.query('rect',this.dom_svg);
													this.arr_nod_all.forEach(dojo.hitch(this,function(nod,nodidx){
														if(
															this.arr_nod_correlated.find(
																function(nod_uncorrelated,nod_uncorrelated_idx){
																if(nod_uncorrelated==nod){
																    return true;
																}else{
																    return false;
																}
															    }
															)
														){
														}else{
															this.arr_nod_uncorrelated.push(nod);
														}
													}));
													this.arr_nod_uncorrelated.forEach(dojo.hitch(this,function(obj_nod,obj_nodidx){
														//$(nod).css('fill','yellow');
														obj_nod.oldfill=$(obj_nod).css('fill');
														this.arr_evt.push(on(
															obj_nod,
															mouse.enter,
															dojo.hitch(this,function(evt){
																$(evt.target).css('fill',this.str_highlightcolor_uncorrelated);
															})
														));
														this.arr_evt.push(on(
															obj_nod,
															mouse.leave,
															dojo.hitch(this,function(evt){
																$(evt.target).css('fill',evt.target.oldfill);
															})
														));
													}));
												}else{
												}
											}
										}),
										dojo.hitch(this,function(err){
											alert(err);
										})
									);
								}
							)
						);
					} else {
						dojoStyle.set(this.domNode,"display","none");
						dojo.empty(this.dom_svg);
					}
					this._executeCallback(callback,"_updateRendering");
				},
				clickLMBS:function(e){
					this.clickElement(e,this.str_click_left_single_mf);
				},
				clickLMBD:function(e){
					this.clickElement(e,this.str_click_left_double_mf);
				},
				clickRMBS:function(e){
					this.clickElement(e,this.str_click_right_single_mf);
				},
				clickRMBD:function(e){
					this.clickElement(e,this.str_click_right_double_mf);
				},
				hover:function(e){
					//--------------------------------------------------------------------------------
					//IMPORTANT:
					//implement solution for overzealous serverside execution via frontend interaction
					//--------------------------------------------------------------------------------
					this.hoverQueue=this.hoverQueue==null?[]:this.hoverQueue;
					this.hoverQueue.push(e);
					window.setTimeout(
						dojo.hitch(this,function(){
							if(this.hoverQueue.length>0){
								this.clickElement(this.hoverQueue[this.hoverQueue.length-1],this.str_hover_mf);
								this.hoverQueue=[];
							}
						}),
						this.int_hoverTimeout
					);
					//--------------------------------------------------------------------------------
				},
				clickElement:function(e,str_mf){
					if(e!=null){
						new Promise((resolve,reject)=>{
							if(this.obj_click==null){
								if(
									str_mf!=null&&
									this.str_click_entity!=null&&
									!(
										this.str_click_entity_id_attr==null&&
										this.str_click_entity_class_attr==null
									)&&
									this.str_click_assoc!=null
								){
									mx.data.create(
										{
											entity:this.str_click_entity,
											callback:dojo.hitch(this,function(obj){
												obj.addReference(
													this.str_click_assoc,
													this._contextObj.getGuid()
												);
												resolve(obj)
											}),
											error:dojo.hitch(this,function(e){
												reject(e);
											})
										}
									);
								}else{
									reject('Invalid interaction attributes');
								}
							}else{
								resolve(obj_click);
							}
						})
						.then(
							dojo.hitch(this,function(obj){
								if(this.str_click_entity_id_attr!=null){
									var tgtid=$(e.target).attr('id');
									if(tgtid!=null){
										obj.set(this.str_click_entity_id_attr,tgtid);
									}else{
									}
								}
								if(this.str_click_entity_class_attr!=null){
									var tgtclass=$(e.target).attr('class');
									if(tgtclass!=null){
										obj.set(this.str_click_entity_class_attr,tgtclass);
									}else{
									}
								}
								//this._execMf(this.str_click_left_single_mf,obj.getGuid(),dojo.hitch(this,function(ret){}))
								this._execMf(str_mf,obj.getGuid(),dojo.hitch(this,function(ret){}))
							}),
							dojo.hitch(this,function(err){
								console.error(err);
							})
						)
					}else{
					}
				},
				_execMf:function(mf,guid,cb){
					if(mf&&guid){
						mx.ui.action(
							mf,
							{
								params: {
									applyto:"selection",
									guids:[guid]
								},
								callback:lang.hitch(this,function(objs){
									if(cb&&typeof cb==="function"){
										cb(objs);
									}
								}),
								error:function(error){
									console.debug(error.description);
								}
							},
							this
						);
					}
				},
				_executeCallback:function(cb,from){
					if(cb&&typeof cb==="function"){
						cb();
					}
				}
			}
		);
	}
);
