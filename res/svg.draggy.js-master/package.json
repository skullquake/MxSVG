{
  "name": "svg.draggy.js",
  "version": "1.1.1",
  "description": "A JavaScript library for dragging SVG things.",
  "main": "src/svg.draggy.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "update-min": "cp src/svg.draggy.min.js example/js/svg.draggy.js && git add example && git commit -m 'Updated svg.draggy.js in the example dir' .",
    "deploy": "cp -r example ../_tmp && git checkout gh-pages && cp -r ../_tmp/* . && git add . -A && git commit -m 'Rebuild.' && rm -rf ../_tmp ../_tmp.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jillix/svg.draggy.js.git"
  },
  "keywords": [
    "dragable",
    "draggy",
    "svg"
  ],
  "author": "jillix <contact@jillix.com>",
  "contributors": [
    "Ionică Bizău <bizauionica@gmail.com>",
    "Wout Fierens <wout@impinc.co.uk>",
    "Florian Loch <florian.loch@gmail.com>",
    "Christian Vonarnim <christian.vonarnim@gmail.com>"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jillix/svg.draggy.js/issues"
  },
  "homepage": "https://github.com/jillix/svg.draggy.js",
  "blah": {
    "ex_img": "http://i.imgur.com/tXn2w8f.jpg",
    "ex_url": "http://jillix.github.io/svg.draggy.js/",
    "description": [
      {
        "h2": "Usage"
      },
      {
        "p": [
          "Include this library after including `svg.js` in your html document. [Here you can see a demo](http://jillix.github.io/svg.draggy.js/).",
          "To make an element draggable, just do:"
        ]
      },
      {
        "code": {
          "language": "js",
          "content": [
            "var draw = new SVG('svg-container').size(400, 400);",
            "var rect = draw.rect(100, 100);",
            "",
            "rect.draggy();"
          ]
        }
      },
      {
        "p": "Yes indeed, that's it! Now the `rect` is draggable. :sparkles:"
      },
      {
        "h2": "Events"
      },
      {
        "p": [
          "There are four different events available you can llisten to: `beforedrag`, `dragstart`, `dragmove` and `dragend`. This is how you assign them:",
          "The `event` object has some custom data added by this library:"
        ]
      },
      {
        "ul": [
          [
            "`event.detail.delta` is an object containing:",
            {
              "ul": [
                "`x` and `y`: The element coordinates.",
                "`movedX` and `movedY`: The element total movement values (available only in `dragmove` event)."
              ]
            }
          ],
          "`event.detail.event` is an object containing the original event"
        ]
      },
      {
        "h4": "`dragstart`"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "rect.on('dragstart', function(event) {",
            "    // Do something",
            "});"
          ]
        }
      },
      {
        "h4": "`beforedrag`"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "rect.on('beforedrag', function(event) {",
            "    // Do something",
            "});"
          ]
        }
      },
      {
        "h4": "`dragmove`"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "rect.on('dragmove', function(event) {",
            "    // Do something",
            "});"
          ]
        }
      },
      {
        "h3": "Constraint"
      },
      {
        "p": "The drag functionality can be limited within a given box. You can pass the the constraint values as an object:"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "rect.draggy({",
            "    minX: 10,",
            "    minY: 15,",
            "    maxX: 200,",
            "    maxY: 100",
            "});"
          ]
        }
      },
      {
        "p": "For more dynamic constraints a function can be passed as well:"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "rect.draggy(function(x, y) {",
            "    return { x: x < 1000, y: y < 300 };",
            "});"
          ]
        }
      },
      {
        "p": "With this you can also easily achieve some snapping functionality:"
      },
      {
        "code": {
          "language": "js",
          "content": [
            "var snapRange = 50;",
            "rect.draggy(function (x, y, elem) {",
            "    var res = {};",
            "",
            "    res.x = x - (x % snapRange);",
            "    res.y = y - (y % snapRange);",
            "",
            "    return res;",
            "});"
          ]
        }
      },
      {
        "h3": "Remove"
      },
      {
        "p": "The draggable functionality can be removed with the `fixed()` method:"
      },
      {
        "code": {
          "language": "js",
          "content": "rect.fixed();"
        }
      },
      {
        "h3": "Viewbox"
      },
      {
        "p": "This plugin is viewBox aware but there is only one thing that you need to keep in mind. If you work with a viewBox on the parent element you need to set the width and height attributes to have the same aspect ratio. So let's say you are using `viewbox='0 0 150 100'` you have to make sure the aspect ratio of `width` and `height` is the same:"
      },
      {
        "code": {
          "language": "js",
          "content": "var draw = SVG('paper').attr('viewBox', '0 0 150 100').size(600, 400);"
        }
      }
    ],
    "generate_license": false
  }
}
